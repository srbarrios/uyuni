# Global SSH configuration (can be overridden per host if necessary)
ssh_defaults:
  username: "root"
  password: "linux"
  #private_key_path: "~/.ssh/id_ed25519"
  port: 22
  connection_timeout: 300
  command_timeout: 300

# Definition of what data to collect per component role
components:
  server:
    useful_data:
      - description: "Last 100 lines of the server's main logs"
        command: "mgrctl exec \"tail -n 100 /var/log/rhn/*.log\""
      - description: "List of existing activation keys"
        command: "mgrctl exec \"spacecmd -q -u admin -p admin api activationkey.listActivationKeys\""
      - description: "List of existing systems"
        command: "mgrctl exec \"spacecmd -q -u admin -p admin api system.listSystems\""
      - description: "List of existing software channels"
        command: "mgrctl exec \"spacecmd -q -u admin -p admin api channel.listSoftwareChannels\""
      - description: "List of accepted salt keys"
        command: "mgrctl exec \"spacecmd -q -u admin -p admin api saltkey.acceptedList\""
      - description: "Status of the main service"
        command: "mgradm status || echo 'systemctl not available'" # Add fallback
      - description: "Processes related to the server"
        command: "mgrctl exec \"ps aux | grep -E 'spacewalk|rhn|manager|uyuni|mgr|taskomatic' || echo 'grep found no processes'\""
      - description: "Listening ports (TCP)"
        command: "mgrctl exec \"ss -tlpn | grep LISTEN || netstat -tlpn | grep LISTEN || echo 'ss/netstat command not available'\""
  minion:
    useful_data:
      - description: "Last 100 lines of the minion's log"
        command: "journalctl --identifier salt-minion --lines 100"
      - description: "Last 100 lines of the minion's zypper log"
        command: "tail -n 100 /var/log/zypper.log"
      - description: "Processes related to the minion"
        command: "ps aux | grep -E 'salt' || echo 'grep found no processes'"
      - description: "Listening ports (TCP)"
        command: "ss -tlpn | grep LISTEN || netstat -tlpn | grep LISTEN || echo 'ss/netstat command not available'"
  proxy:
    useful_data:
      - description: "Last 100 lines of the proxy's log"
        command: "journalctl --lines 100"
  build_host:
    useful_data:
      - description: "Last 100 lines of the build host's log"
        command: "journalctl --lines 100"

# Definition of the hosts to be analyzed
# TODO: We need to change the hostnames to the ones specified on the .bashrc file on the test runner.
hosts:
  - hostname: "uyuni-ci-master-podman-server.mgr.suse.de"
    role: "server"
    mandatory: True
  - hostname: "uyuni-ci-master-podman-proxy.mgr.suse.de"
    role: "proxy"
    mandatory: True
  - hostname: "uyuni-ci-master-podman-suse-minion.mgr.suse.de"
    role: "minion"
  - hostname: "uyuni-ci-master-podman-build-host.mgr.suse.de"
    role: "build_host"
  - hostname: "uyuni-ci-master-podman-suse-sshminion.mgr.suse.de"
    role: "minion"
  - hostname: "uyuni-ci-master-podman-rhlike-minion.mgr.suse.de"
    role: "minion"
  - hostname: "uyuni-ci-master-podman-deblike-minion.mgr.suse.de"
    role: "minion"

# LLMs configurations

default_llm_provider: "gemini" # Default LLM to use for analysis
base_prompt: "You are an expert in Uyuni project." # Prompt to be prepended in LLMs calls

ollama:
  base_url: "http://localhost:11434"
  model: "mistral"
  request_timeout: 600
  seed: 1 # Seed to generate the same text for the same prompt.
  embedding_model: "nomic-embed-text" # Model to use for embeddings
  persist_directory: "examples/uyuni/chroma_db" # Chroma DB path

gemini:
  # api_key: "YOUR_GEMINI_KEY_DIRECTLY_HERE" # Direct key
  api_key_env_var: "GEMINI_API_KEY" # Custom Env Var
  model: "gemini-2.0-flash"         # Model to use for analysis
  multimodal: true                  # Whether the model supports multimodal input

openai:
  # api_key: "YOUR_OPENAI_KEY_DIRECTLY_HERE" # Direct key
  api_key_env_var: "OPENAI_API_KEY" # Custom Env Var
  model: "gpt-4.1"                  # Model to use for analysis
  multimodal: true                  # Whether the model supports multimodal input
